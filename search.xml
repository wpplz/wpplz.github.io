<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/09/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2022/09/23/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> infinity 99999999 <span class="hljs-comment">//最大值（无穷大）</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> max_vertex_num 20 <span class="hljs-comment">//最大顶点个数</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VRType int</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> InfoType char  <span class="hljs-comment">//弧的数据类型</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> VertexType int <span class="hljs-comment">//顶点的数据类型</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> Status int</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">enum</span><br>&#123;<br>    DG = <span class="hljs-number">1</span>,<br>    DN,<br>    UDG,<br>    UDN<br>&#125; GraphKind; <span class="hljs-comment">// 图的种类</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">ArcCell</span><br>&#123;<br>    VRType adj;     <span class="hljs-comment">// VRType表示顶点关系类型，无权图，用0/1表示是否相邻；有权图，表示权值的类型。</span><br>    InfoType *info; <span class="hljs-comment">//该弧权值的相关信息</span><br>&#125; ArcCell, AdjMatrix[max_vertex_num][max_vertex_num];<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span><br>&#123;<br>    <span class="hljs-comment">/* data */</span><br>    VertexType vex[max_vertex_num]; <span class="hljs-comment">//顶点向量</span><br>    AdjMatrix arcs;                 <span class="hljs-comment">//邻接矩阵</span><br>    <span class="hljs-type">int</span> vexnum, arcnum;             <span class="hljs-comment">//图的顶点数，弧数</span><br>    GraphKind kind;                 <span class="hljs-comment">//图的种类</span><br>&#125; MGraph;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">LocateVex</span><span class="hljs-params">(MGraph G, VertexType v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (G.vex[i] == v)<br>            <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;图中没有该结点&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//构建有向图</span><br><span class="hljs-function">Status <span class="hljs-title">CreateDG</span><span class="hljs-params">(MGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>     <span class="hljs-type">int</span> j, i, v1, v2,k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入有向图的顶点数 弧数:(以a-b的形式）\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d&quot;</span>, &amp;G.vexnum, &amp;G.arcnum);<br>    <span class="hljs-comment">//初始化邻接矩阵的顶点向量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化邻接矩阵的顶点向量:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;G.vex[i]);<br>    <span class="hljs-comment">//初始化邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++)<br>        &#123;<br>            G.arcs[i][j].adj = <span class="hljs-number">0</span>;<br>            G.arcs[i][j].info = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构建邻接矩阵:\n&quot;</span>);<br>    <span class="hljs-comment">//构建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G.arcnum; k++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d条弧弧尾和弧头的两个顶点：（以a-b的形式）&quot;</span>, k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d&quot;</span>, &amp;v1, &amp;v2);<br>        i = <span class="hljs-built_in">LocateVex</span>(G, v1);<br>        j = <span class="hljs-built_in">LocateVex</span>(G, v2);<br>        G.arcs[i][j].adj = <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//构建有向网</span><br><span class="hljs-function">Status <span class="hljs-title">CreateDN</span><span class="hljs-params">(MGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;   <br>    <span class="hljs-type">int</span> IncInfo, j, i, v1, v2, w,k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入有向网的顶点数 弧数 弧的信息:以(顶点数 弧数 弧的信息)的格式,如果弧不含其他信息，那么设置其为0\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;G.vexnum, &amp;G.arcnum, &amp;IncInfo);<br>    <span class="hljs-comment">//初始化邻接矩阵的顶点向量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化邻接矩阵的顶点向量:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;G.vex[i]);<br>    <span class="hljs-comment">//初始化邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++)<br>        &#123;<br>            G.arcs[i][j].adj = infinity;<br>            G.arcs[i][j].info = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构建邻接矩阵:\n&quot;</span>);<br>    <span class="hljs-comment">//构建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G.arcnum; k++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d条弧弧尾和弧头的两个顶点及该弧的权值：（以a-b-c的形式）&quot;</span>, k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;v1, &amp;v2, &amp;w);<br>        i = <span class="hljs-built_in">LocateVex</span>(G, v1);<br>        j = <span class="hljs-built_in">LocateVex</span>(G, v2);<br>        G.arcs[i][j].adj = w;<br>        <span class="hljs-keyword">if</span> (IncInfo)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入该弧的信息：&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, G.arcs[i][j].info);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//构建无向图</span><br><span class="hljs-function">Status <span class="hljs-title">CreateUDG</span><span class="hljs-params">(MGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>      <span class="hljs-type">int</span> j, i, v1, v2,k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入有向图的顶点数 弧数:(以a-b的形式）\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d&quot;</span>, &amp;G.vexnum, &amp;G.arcnum);<br>    <span class="hljs-comment">//初始化邻接矩阵的顶点向量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化邻接矩阵的顶点向量:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;G.vex[i]);<br>    <span class="hljs-comment">//初始化邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++)<br>        &#123;<br>            G.arcs[i][j].adj = <span class="hljs-number">0</span>;<br>            G.arcs[i][j].info = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构建邻接矩阵:\n&quot;</span>);<br>    <span class="hljs-comment">//构建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G.arcnum; k++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d条弧弧尾和弧头的两个顶点：（以a-b的形式）&quot;</span>, k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d&quot;</span>, &amp;v1, &amp;v2);<br>        i = <span class="hljs-built_in">LocateVex</span>(G, v1);<br>        j = <span class="hljs-built_in">LocateVex</span>(G, v2);<br>        G.arcs[i][j].adj = <span class="hljs-number">1</span>;<br>        G.arcs[j][i] = G.arcs[i][j];<br>    &#125;<br>&#125;<br><span class="hljs-comment">//构建无向网</span><br><span class="hljs-function">Status <span class="hljs-title">CreateUDN</span><span class="hljs-params">(MGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> IncInfo, j, i, v1, v2, w,k;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入无向网的顶点数 弧数 弧的信息:以(顶点数 弧数 弧的信息)的格式,如果弧不含其他信息，那么设置其为0\n&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;G.vexnum, &amp;G.arcnum, &amp;IncInfo);<br>    <span class="hljs-comment">//初始化邻接矩阵的顶点向量</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;初始化邻接矩阵的顶点向量:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;G.vex[i]);<br>    <span class="hljs-comment">//初始化邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (j = <span class="hljs-number">0</span>; j &lt; G.vexnum; j++)<br>        &#123;<br>            G.arcs[i][j].adj = infinity;<br>            G.arcs[i][j].info = <span class="hljs-literal">NULL</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;构建邻接矩阵:\n&quot;</span>);<br>    <span class="hljs-comment">//构建邻接矩阵</span><br>    <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; G.arcnum; k++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;第%d条弧弧尾和弧头的两个顶点及该弧的权值：（以a-b-c的形式）&quot;</span>, k + <span class="hljs-number">1</span>);<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d-%d-%d&quot;</span>, &amp;v1, &amp;v2, &amp;w);<br>        i = <span class="hljs-built_in">LocateVex</span>(G, v1);<br>        j = <span class="hljs-built_in">LocateVex</span>(G, v2);<br>        G.arcs[i][j].adj = w;<br>        <span class="hljs-keyword">if</span> (IncInfo)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入该弧的信息：&quot;</span>);<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, G.arcs[i][j].info);<br>        &#125;<br>        G.arcs[j][i] = G.arcs[i][j];<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-function">Status <span class="hljs-title">CreateGraph</span><span class="hljs-params">(MGraph &amp;G)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-comment">//用邻接矩阵来构建图</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;请输入构建图的类型：1.有向图 2.有向网 3.无向图 4.无向网\n&quot;</span>);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;G.kind);<br>        <span class="hljs-keyword">switch</span> (G.kind)<br>        &#123;<br>        <span class="hljs-keyword">case</span> DG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateDG</span>(G);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> DN:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateDN</span>(G);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> UDG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateUDG</span>(G);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> UDN:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateUDN</span>(G);<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;输入错误，请重新输入&quot;</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (G.kind &gt;= <span class="hljs-number">1</span> &amp;&amp; G.kind &lt;= <span class="hljs-number">4</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//构建DFS算法</span><br><span class="hljs-comment">//使用全局变量</span><br><span class="hljs-type">int</span> visited[max_vertex_num];<br><span class="hljs-built_in">Status</span> (*VisitFunc)(MGraph G,<span class="hljs-type">int</span> v);<br><span class="hljs-function">Status <span class="hljs-title">Visit</span><span class="hljs-params">(MGraph G,VertexType e)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, G.vex[e]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">//获取G中某个结点v的第一个邻接点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">FirstAdjVex</span><span class="hljs-params">(MGraph G, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> col;<br>    <span class="hljs-keyword">for</span> (col = <span class="hljs-number">0</span>; col &lt; G.vexnum; col++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (G.arcs[v][col].adj != infinity)<br>            <span class="hljs-keyword">return</span> col;<br>    &#125; <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-comment">//获取G中结点v的某一个邻接点w的下一个邻接点</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">NextAdjVex</span><span class="hljs-params">(MGraph G, <span class="hljs-type">int</span> v, <span class="hljs-type">int</span> w)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> col;<br>    <span class="hljs-keyword">for</span> (col = w + <span class="hljs-number">1</span>; col &lt; G.vexnum; col++)<br>    &#123;<br>        <span class="hljs-keyword">if</span> (G.arcs[v][col].adj != infinity)<br>            <span class="hljs-keyword">return</span> col;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFSTraverse</span><span class="hljs-params">(MGraph G, Status (*Visit)(MGraph G,<span class="hljs-type">int</span> v))</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph G, <span class="hljs-type">int</span> v)</span></span>;<br>    VisitFunc = Visit;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<br>        visited[i] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; G.vexnum; ++i)<br>        <span class="hljs-keyword">if</span> (!visited[i])<br>            <span class="hljs-built_in">DFS</span>(G, i);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DFS</span><span class="hljs-params">(MGraph G, <span class="hljs-type">int</span> v)</span></span><br><span class="hljs-function"></span>&#123;   <br>    visited[v] = <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">Visit</span>(G,v);<br>    <span class="hljs-type">int</span> w;<br>    <span class="hljs-keyword">for</span> (w = <span class="hljs-built_in">FirstAdjVex</span>(G, v); w &gt;= <span class="hljs-number">0</span>; w = <span class="hljs-built_in">NextAdjVex</span>(G, v, w))<br>    &#123;<br>        <span class="hljs-keyword">if</span> (!visited[w])<br>            <span class="hljs-built_in">DFS</span>(G, w);<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    MGraph G;<br>    <span class="hljs-built_in">CreateGraph</span>(G);<br>    <span class="hljs-built_in">DFSTraverse</span>(G,Visit);<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><h3 id="1-1"><a href="#1-1" class="headerlink" title="1"></a>1</h3><h3 id="2-1"><a href="#2-1" class="headerlink" title="2"></a>2</h3><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><h3 id="1-2"><a href="#1-2" class="headerlink" title="1"></a>1</h3><h3 id="2-2"><a href="#2-2" class="headerlink" title="2"></a>2</h3><iframe src="//player.bilibili.com/player.html?aid=245769098&bvid=BV1fv41147pe&cid=270906472&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="width:100%; height:600px;"> </iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
